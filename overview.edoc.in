@title RabbitMQ gateway module for ejabberd
@author Tony Garnock-Jones <tonyg@lshift.net>
@author LShift Ltd. <query@lshift.net>
@copyright 2008 Tony Garnock-Jones and LShift Ltd.

@version %%VERSION%%

@doc <p>RabbitMQ gateway for ejabberd.</p>

== Introduction ==

The {@link mod_rabbitmq} module implements an <a
href="http://www.ejabberd.im/">ejabberd</a> extension module which
gateways AMQP (as implemented by <a
href="http://www.rabbitmq.com/">RabbitMQ</a>) to XMPP.

By bridging between the two systems, we benefit from:

<ul>
  <li>XMPP's internet-scale addressing and federation</li>
  <li>XMPP's presence model</li>
  <li>AMQP's store-and-forward capability</li>
  <li>AMQP's routing and filtering (using <i>exchanges</i> and <i>bindings</i>)</li>
</ul>

The current implementation is a very simple mapping between the two
systems. Its simplicity keeps the code short, but only exposes a
subset of AMQP features to the XMPP network, and vice versa.

== Basic Operation ==

The services provided by a mod_rabbitmq gateway are accessed by
ordinary XMPP accounts registered with normal XMPP servers taking part
in the global XMPP network, including

<ul>
  <li>end-users running desktop XMPP IM clients</li>
  <li>embedded services acting as XMPP bots</li>
  <li>other gateways and network services</li>
</ul>

The AMQP resources managed by the gateway are also accessible as usual
via the AMQP protocol.

<div style="text-align: center;">
<img src="xmpp-amqp-gateway.png" alt="Illustration of example AMQP/XMPP network">
</img>
</div>

In the example illustration above,

<ul>

  <li>Both <tt>romeo@montague.net</tt> and <tt>juliet@capulet.com</tt>
  have subscribed to presence announcements for (i.e. become IM
  buddies with) <tt>chatroom@dev.rabbitmq.com</tt>.</li>

  <li>XMPP messages sent to <tt>chatroom@dev.rabbitmq.com</tt> are
  routed through the AMQP "chatroom" exchange to any bound queues --
  including those of any XMPP JIDs that are buddies with the AMQP
  exchange.</li>

  <li>Any AMQP messages sent to the "chatroom" exchange are of course
  routed similarly.</li>

  <li>In the diagram, <tt>juliet</tt> is online, but <tt>romeo</tt> is
  offline (unavailable). The system is therefore running a consumer
  process which consumes from <tt>juliet</tt>'s queue, sending her the
  messages it contains. The queue for <tt>romeo</tt> continues to
  buffer messages until he is next online.</li>

</ul>

== JIDs Map to Exchanges ==

Each exchange in the AMQP virtual host is given a JID. For example,
the JID "<tt>test@dev.rabbitmq.com</tt>" resolves to the exchange
named "<tt>test</tt>" within the virtual host that the gateway
represents.

Queues are not currently given JIDs; instead, they're created and
deleted on demand by the action of either direct AMQP commands, or by
XMPP subscription management (see below).

Messages sent via XMPP to an exchange's JID are routed and delivered
as per normal AMQP rules.

== Presence Subscription Controls Queue Creation and Binding ==

Whenever a JID in the global XMPP network subscribes to presence
notifications of an exchange JID managed by the gateway, the exchange
subscribes back. Once the subscription process is complete, a queue is
created for the remote JID (if one does not already exist), and the
queue is then bound to the exchange. For example:

<ul>

  <li><tt>romeo@montague.net</tt> knows that on
  <tt>dev.rabbitmq.com</tt> there's an exchange called
  <tt>test</tt>.</li>

  <li>He uses his XMPP client to add <tt>test@dev.rabbitmq.com</tt> to
  his buddy list.</li>

  <li>The mod_rabbitmq gateway at <tt>dev.rabbitmq.com</tt>
  effectively adds <tt>romeo@montague.net</tt> to the roster for
  the <tt>test</tt> exchange.</li>

  <li>The gateway then creates a local queue named
  "<tt>romeo@montague.net</tt>", and binds it to the "test"
  exchange.</li>

</ul>

If <tt>romeo</tt> later subscribes to another exchange managed by the
same gateway, the same queue is reused. Deliveries for each exchange
subscribed to are all placed on the single queue responsible for the
remote JID "<tt>romeo@montague.net</tt>".

If <tt>romeo</tt> later unsubscribes from all exchanges managed by the
gateway, so that no subscriptions/bindings are left for his queue, the
queue is deleted.

== JID Resources are used as Routing Keys ==

XMPP's JIDs have three parts: <tt>name@dns.host/resource</tt>.

<ul>

  <li><tt>name</tt> is a local part, unique within a server.</li>

  <li><tt>dns.host</tt> is a globally-unique DNS name, used to
  identify a server.</li>

  <li><tt>resource</tt> is an (optional!) sub-name for identifying any
  one of a number of endpoints that are controlled by and represent
  <tt>name@dns.host</tt>.</li>

</ul>

In the current AMQP-to-XMPP binding, the <tt>resource</tt> part of the
JID is used as the <i>AMQP routing key</i> when delivering messages,
and the <i>AMQP binding pattern</i> when subscribing and
unsubscribing.

This means that (...)

== Presence Controls Consumers and Deliveries ==

Because the gateway has subscribed to <tt>romeo</tt>'s presence
status, it will hear about his presence changes. When he comes online,
an AMQP consumer is started, which reads from his queue, delivering
each queued-up message as an instant message. When he goes offline,
the consumer is stopped, and messages are buffered in the AMQP queue
as usual for later consumption.

== Creating, Listing and Deleting Exchanges ==

The current implementation provides an XMPP bot which speaks a
high-level command-line based language for creating, listing and
deleting exchanges. Given a mod_rabbitmq instance responsible for
<tt>dev.rabbitmq.com</tt>, the following interaction, between the two
JIDs <tt>romeo@montague.net</tt> and <tt>dev.rabbitmq.com</tt>
(note: it is valid to have a JID that is just a DNS name, without a
leading "name@" part!) shows the instance's bot in action:

<pre>
[18:12:05] &lt;romeo&gt; help
[18:12:06] &lt;dev.rabbitmq.com&gt; Here is a list of commands. Use 'help (command)' to get details on any one.
["help","exchange.declare","exchange.delete","bind","unbind","list"]
[18:12:12] &lt;romeo&gt; list
[18:12:12] &lt;dev.rabbitmq.com&gt; Exchanges available:
[{"mandatoryTestExchange",fanout,transient,[]},
 {"canvaspainter",fanout,durable,[]},
 {"sam",fanout,transient,[]},
 {"amq.rabbitmq.log",topic,durable,[]},
 {"rabbit",fanout,durable,[]},
 {"test",fanout,durable,[]},
 {"test completion",fanout,transient,[]},
 {"amq.topic",topic,durable,[]},
 {"amq.direct",direct,durable,[]},
 {"amq.fanout",fanout,durable,[]}]
[18:13:05] &lt;romeo&gt; help exchange.declare
[18:13:05] &lt;dev.rabbitmq.com&gt; 'exchange.declare (name) [-type (type)] [-transient]'. Creates a new AMQP exchange.
[18:13:14] &lt;romeo&gt; exchange.declare foo -type fanout
[18:13:14] &lt;dev.rabbitmq.com&gt; Exchange "foo" of type fanout declared. Now you can subscribe to it.
[18:13:19] &lt;romeo&gt; help exchange.delete
[18:13:19] &lt;dev.rabbitmq.com&gt; 'exchange.delete (name)'. Deletes an AMQP exchange.
[18:13:23] &lt;romeo&gt; exchange.delete foo
[18:13:23] &lt;dev.rabbitmq.com&gt; Exchange "foo" deleted.
</pre>

== Configuring a mod_rabbitmq Instance ==

Each mod_rabbitmq instance in a running ejabberd maps to a single AMQP
"virtual host" running within a RabbitMQ instance: a collection of
exchanges, queues, and the bindings between them. The instance is
given responsibility for a single DNS domain: for example, JIDs ending
with <tt>@dev.rabbitmq.com</tt> map to a mod_rabbitmq instance.

Currently, only a single mod_rabbitmq can run within each ejabberd
node.

== Media Types ==

== Reliable Delivery ==

